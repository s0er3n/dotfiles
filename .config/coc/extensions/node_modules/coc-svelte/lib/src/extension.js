"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.activate = void 0;
const coc_nvim_1 = require("coc.nvim");
const path_1 = __importDefault(require("path"));
const autoClose_1 = require("./html/autoClose");
function activate(context) {
    var _a;
    const runtimeConfig = coc_nvim_1.workspace.getConfiguration('svelte.language-server');
    const { workspaceFolders } = coc_nvim_1.workspace;
    const rootPath = Array.isArray(workspaceFolders) ? coc_nvim_1.Uri.parse(workspaceFolders[0].uri).fsPath : undefined;
    const tempLsPath = runtimeConfig.get('ls-path');
    const lsPath = tempLsPath && tempLsPath.trim() !== ''
        ? path_1.default.isAbsolute(tempLsPath)
            ? tempLsPath
            : path_1.default.join(rootPath, tempLsPath)
        : undefined;
    const serverModule = require.resolve(lsPath || 'svelte-language-server/bin/server.js');
    // Add --experimental-modules flag for people using node 12 < version < 12.17
    // Remove this in mid 2022
    const runExecArgv = ['--experimental-modules'];
    let port = (_a = runtimeConfig.get('port')) !== null && _a !== void 0 ? _a : -1;
    if (port < 0) {
        port = 6009;
    }
    else {
        console.log('setting port to', port);
        runExecArgv.push(`--inspect=${port}`);
    }
    const debugOptions = { execArgv: ['--nolazy', '--experimental-modules', `--inspect=${port}`] };
    const serverOptions = {
        run: {
            module: serverModule,
            transport: coc_nvim_1.TransportKind.ipc,
            options: { execArgv: runExecArgv },
        },
        debug: { module: serverModule, transport: coc_nvim_1.TransportKind.ipc, options: debugOptions },
    };
    const serverRuntime = runtimeConfig.get('runtime');
    if (serverRuntime) {
        serverOptions.run.runtime = serverRuntime;
        serverOptions.debug.runtime = serverRuntime;
        console.log('setting server runtime to', serverRuntime);
    }
    const clientOptions = {
        documentSelector: [{ scheme: 'file', language: 'svelte' }],
        revealOutputChannelOn: coc_nvim_1.RevealOutputChannelOn.Never,
        synchronize: {
            configurationSection: ['svelte', 'javascript', 'typescript', 'prettier'],
            fileEvents: coc_nvim_1.workspace.createFileSystemWatcher('{**/*.js,**/*.ts}', false, false, false),
        },
        initializationOptions: { config: coc_nvim_1.workspace.getConfiguration('svelte.plugin') },
    };
    let ls = createLanguageServer(serverOptions, clientOptions);
    context.subscriptions.push(ls.start());
    ls.onReady().then(() => {
        const tagRequestor = (document, position) => {
            const param = {
                textDocument: { uri: document.uri },
                position,
            };
            return ls.sendRequest('html/tag', param);
        };
        const disposable = autoClose_1.activateTagClosing(tagRequestor, { svelte: true }, 'html.autoClosingTags');
        context.subscriptions.push(disposable);
        coc_nvim_1.window.showMessage('Svelte language server now active.');
    });
    context.subscriptions.push(coc_nvim_1.commands.registerCommand('svelte.restartLanguageServer', async () => {
        await restartLS(true);
    }));
    async function restartLS(showNotification) {
        await ls.stop();
        ls = createLanguageServer(serverOptions, clientOptions);
        context.subscriptions.push(ls.start());
        await ls.onReady();
        if (showNotification) {
            coc_nvim_1.window.showMessage('Svelte language server restarted.');
        }
    }
}
exports.activate = activate;
function createLanguageServer(serverOptions, clientOptions) {
    return new coc_nvim_1.LanguageClient('svelte', 'Svelte', serverOptions, clientOptions);
}
//# sourceMappingURL=extension.js.map